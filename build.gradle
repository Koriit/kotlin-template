/////////////
// PLUGINS //
/////////////

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "com.adarshr.test-logger" version "2.0.0"
    id "org.owasp.dependencycheck" version "5.3.2.1"
    id "com.github.hierynomus.license-report" version "0.15.0"
    id "com.github.nwillc.buildinfo" version "0.1.4"
    id "jacoco"
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
    id "io.gitlab.arturbosch.detekt" version "1.8.0"
    id "com.github.ben-manes.versions" version "0.28.0"
}

//////////////////
// DEPENDENCIES //
//////////////////

repositories {
    jcenter()
}

ext {
    ktorVersion = "1.3.2"
    kodeinVersion = "6.5.5"
}

dependencies {
    configurations.all {
        exclude group: "log4j" // example clashing transitive dependency
    }

    // KOTLIN
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"

    // Jackson
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.0"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.0"

    // KODEIN DI
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodeinVersion"
    implementation "koriit.kotlin:kodein-application:0.4.3"

    // KTOR API Server
    implementation "io.ktor:ktor-server-core:$ktorVersion"
    implementation "io.ktor:ktor-server-cio:$ktorVersion"
    implementation "io.ktor:ktor-jackson:$ktorVersion"
    implementation "koriit.kotlin:ktor-time:0.2.2"
    implementation "koriit.kotlin:ktor-controllers:0.6.0"
    implementation "koriit.kotlin:ktor-controllers-openapi:0.4.0"
    implementation "koriit.kotlin:ktor-error-responses:0.3.2"
    implementation "koriit.kotlin:ktor-logging:0.3.1"

    // HTTP
    implementation "io.ktor:ktor-client-apache:$ktorVersion"
    implementation "io.ktor:ktor-client-json-jvm:$ktorVersion"
    implementation "io.ktor:ktor-client-jackson:$ktorVersion"
    implementation "koriit.kotlin:ktor-client-logging:0.2.1"

    // Configuration
    implementation "com.uchuhimo:konf-core:0.22.1"
    implementation "com.uchuhimo:konf-yaml:0.22.1"
    implementation "org.apache.commons:commons-text:1.8"

    // LOGGING
    implementation "koriit.kotlin:slf4j-utils-logback:0.2.4"

    // DATABASE
    implementation "org.flywaydb:flyway-core:6.4.1"
    implementation "com.h2database:h2:1.4.200"
    implementation "com.zaxxer:HikariCP:3.4.3"
    implementation "com.github.seratch:kotliquery:1.3.1"

    // SECURITY
    implementation "org.springframework.security:spring-security-crypto:5.3.1.RELEASE"

    // TESTING
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktorVersion"
    testImplementation "io.ktor:ktor-server-test-host:$ktorVersion"
    testImplementation "org.hamcrest:hamcrest-core:2.2"
    testImplementation("com.jayway.jsonpath:json-path-assert:2.4.0") {
        exclude group: "org.hamcrest"
    }
    testImplementation "org.junit.jupiter:junit-jupiter:5.6.2"
    testImplementation "io.mockk:mockk:1.10.0"
    testImplementation "koriit.kotlin:openapi-matcher:0.6.2"
}

/////////////
// UPDATES //
/////////////

def isNonStable = { String version ->
    def regex = /^[0-9,.v-]+((-r)|(release)|(final)|(ga))?$/
    return !(version.toLowerCase() ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

/////////////
// COMPILE //
/////////////

targetCompatibility = 1.11
sourceCompatibility = targetCompatibility

def compilerArgs = [
        "-Xjsr305=strict",
        "-Xuse-experimental=io.ktor.util.KtorExperimentalAPI",
        "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
        "-Xuse-experimental=kotlin.ExperimentalStdlibApi"
]

compileKotlin {
    dependsOn ktlintFormat
    kotlinOptions {
        freeCompilerArgs += compilerArgs
        jvmTarget = "$targetCompatibility"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs += compilerArgs
        jvmTarget = "$targetCompatibility"
    }
}

//////////
// TEST //
//////////

ktlint {
    version = "0.36.0"
    verbose = true
}

detekt {
    config = files("detekt.yml")
    buildUponDefaultConfig = true
}

downloadLicenses {
    includeProjectDependencies = true
    dependencyConfiguration = "implementation"
}
project.configurations.getByName("implementation").setCanBeResolved(true)

test {
    useJUnitPlatform {
        excludeTags project.hasProperty("fast") ? "Slow" : "None"
    }
}

jacoco {
    toolVersion = "0.8.4"
}

if (!project.hasProperty("fast")) test.finalizedBy(jacocoTestReport)

//////////////
// ASSEMBLE //
//////////////

buildInfo {
    doFirst {
        mkdir "$buildDir/tmp"
    }
}

buildinfo {
    output = "$buildDir/tmp/build.json"
}

processResources {
    dependsOn buildInfo
    from "$buildDir/tmp/build.json"
}

def mainClass = "koriit.kotlin.myapp.ApplicationKt"

jar {
    baseName projectName
    manifest {
        attributes "Main-Class": mainClass
    }
}

shadowJar {
    baseName projectName
    classifier null
    zip64 true
    mergeServiceFiles()
}

build.finalizedBy(shadowJar)

///////////
// OTHER //
///////////

task getVersion {
    doLast {
        print project.version
    }
}

task fmt {
    dependsOn ktlintFormat
}

task run(type: JavaExec) {
    dependsOn build
    main = "-jar";
    args jar.archivePath
}
